services:
  # ！MySQL 容器配置
  mysql_service:
    container_name: mysql_service
    image: "mysql:8"
    environment:
      # 允许访问的主机，% 表示放行任意主机
      MYSQL_ROOT_HOST: "%"
      # MySQL root 账户的默认密码
      MYSQL_ROOT_PASSWORD: root
      TZ: Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      # 将数据挂载到 ./mysql_data 目录
      - "./mysql_data:/var/lib/mysql"
    networks:
      - persistent
  # ！Redis 容器配置
  redis_service:
    container_name: redis_service
    image: "redis:7-alpine"
    command: "redis-server"
    environment:
      TZ: Asia/Shanghai
    ports:
      - "6379:6379"
    volumes:
      # 将数据挂载到 redis_data 目录
      - "./redis_volume:/data"
    networks:
      - persistent
  # ！前端应用容器配置，见 `Dockerfile_NodeJs`
  frontend_service:
    container_name: frontend_service
    # 指定构建上下文，即前端 Dockerfile 路径
    build: /path/to/frontend/Dockerfile
    # 应用启动命令，默认为 "npm run dev"
    command: npm run dev
    environment:
      SERVER_PORT: 8081 # 请依据源码配置，指定镜像暴露的端口
      TZ: Asia/Shanghai
    ports:
      - "8081:8081" # 请依据环境变量 SERVER_PORT 设置
    networks:
      - default
  # ！后端应用容器配置，见 `Dockerfile_SpringBoot`、`Dockerfile_Tomcat`
  backend_service:
    container_name: backend_service
    build:
      # 指定构建上下文，即后端 Dockerfile 路径
      context: /path/to/backend/Dockerfile
      args:
        # 工件所在路径，IDEA 中 Maven 构建的项目为 "target"，IDEA 构建的项目为 "out/artifacts/工件名称"
        - ARTIFACT_PATH=target
    environment:
      # 请依据源码配置，指定镜像暴露的端口
      SERVER_PORT: 8080
      TZ: Asia/Shanghai
    ports:
      # 请依据环境变量 SERVER_PORT 设置
      - "8080:8080"
    networks:
      - persistent
      - default

# 卷配置，如果使用了卷，需要允许外部访问
volumes:
  example_volume:
    external: true

# 网络配置，让前端与持久层隔离
networks:
  # 前后端应用的容器网络
  default:
  # 后端应用和持久层（数据库、缓存）的容器网络
  persistent:
