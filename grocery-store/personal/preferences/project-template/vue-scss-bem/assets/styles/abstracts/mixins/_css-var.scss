/// The mixins for setting CSS Variables

@use 'sass:map';
@use 'sass:color';

@use '../variables/common';
@use '../functions/css-var';

/// Generate CSS variable name, and set it in current scope with a certain value
/// @access public
/// @param {String | List[String]} $name - A string, or strings in list form
/// @param {Any} $value - Value
/// @example
///   @include set-var('color-primary', red);
///   --cs-color-primary: red;
/// @example
///   @include set-var(('color', 'primary'), red);
///   --cs-color-primary: red;
@mixin set-var($name, $value) {
  #{css-var.getVarName($name)}: #{$value};
}

/// Process all keys in the SCSS map, and set all CSS variables from them
/// @access public
/// @param {String} $name - A string
/// @param {Map} $map - SCSS map contains multiple keys and values
/// @example
///   @include set-vars('bg-color', $bg-color);
///   --cs-bg-color: $bg-color.'';
///   --cs-bg-color-light: $bg-color.light;
///   --cs-bg-color-dark: $bg-color.dark;
///   --cs-bg-color-primary: $bg-color.primary;
///   --cs-bg-color-overlay: $bg-color.overlay;
/// @example
///   @include set-vars('text-color', $text-color);
///   --cs-text-color: $text-color.default;
///   --cs-text-color-light: $text-color.light;
///   --cs-text-color-dark: $text-color.dark;
///   --cs-text-color-primary: $text-color.primary;
///   --cs-text-color-overlay: $text-color.overlay;
@mixin set-vars($name, $map) {
  @each $key, $value in $map {
    @if $key == 'default' {
      #{css-var.getVarName($name)}: #{$value};
    } @else {
      #{css-var.getVarName($name, $key)}: #{$value};
    }
  }
}

/// Generate CSS variable name, and set it in current scope with a certain value from existing CSS variable
/// @access public
/// @param {String | List[String]} $name - A string, or strings in list form
/// @param {String | List[String]} $existing-name - A string, or strings in list form
/// @example
///   @include set-var-existing('button-text-color', 'color-primary');
///   --cs-button-text-color: var(--cs-color-primary);
/// @example
///   @include set-var-existing(('button', 'text-color'), ('color', 'primary'));
///   --cs-button-text-color: var(--cs-color-primary);
@mixin set-var-existing($name, $existing-name) {
  $name: css-var.getVarName($name);
  $existing-name: css-var.getVarName($existing-name);
  #{$name}: var(#{$existing-name});
}

/// Process all keys in the SCSS map `$colors`, and set all CSS colors from them
/// @access public
/// @example
///   @include set-colors();
///   --cs-color-white: $colors.white;
///   --cs-color-black: $colors.black;
///   --cs-color-primary: $colors.primary;
///   --cs-color-success: $colors.success;
///   --cs-color-warn: $colors.warn;
///   --cs-color-error: $colors.error;
@mixin set-colors() {
  @each $key, $value in common.$colors {
    @include set-var(('color', $key), $value);
  }
}

/// Process all keys in the SCSS map `$colors-<schema>`, and set all CSS colors from them
/// @access public
/// @param {String} $schema - Color schema
/// @example
///   @include set-colors-schema('light');
///   --cs-color-primary-light-1: $colors-light.primary.light-1;
///   --cs-color-primary-light-3: $colors-light.primary.light-3;
///   --cs-color-primary-dark-2: $colors-dark.primary.dark-2;
/// @example
///   @include set-colors-schema('dark');
///   --cs-color-primary-light-1: $colors-dark.primary.light-1;
///   --cs-color-primary-light-3: $colors-dark.primary.light-3;
///   --cs-color-primary-dark-2: $colors-dark.primary.dark-2;
@mixin set-colors-schema($schema: 'light') {
  $map: common.$colors;

  @if $schema == 'light' {
    $map: common.$colors-light;
  } @else if $schema == 'dark' {
    $map: common.$colors-dark;
  }

  @each $key, $value in $map {
    @each $level in map.keys($value) {
      @include set-var(('color', $key, $level), map.get($value, $level));
    }
  }
}
