/// The mixins for operating selector (BEM style & state check)

@use '../variables/config/selector' as config;
@use '../functions/selector' as *;

/// Block name
$B: null;
/// Element name
$E: null;

/// Generate BEM selector for block
/// @access public
/// @param {String} $block - Block name
/// @example
///   @include b('button') {
///     @content;
///   }
///   .button {
///     @content;
///   }
@mixin b($block) {
  $B: config.$namespace + config.$common-separator + $block !global;

  .#{$B} {
    @content;
  }
}

/// Generate BEM selector for element
/// @access public
/// @param {String} $element - Element name
/// @example
///   @include e('button') {
///     @content;
///   }
///   .#{$B}__input {
///     @content;
///   }
@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{$currentSelector + '.' + $B + config.$element-separator + $unit + ','};
  }

  @if hasSpecialNestingRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

/// Generate BEM selector for modifier
/// @access public
/// @param {String} $modifier - Modifier name
/// @example
///   @include m('large', 'small) {
///     @content;
///   }
///   .#{$B}__#{$E}--large,
///   .#{$B}__#{$E}--small {
///     @content;
///   }
@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + $selector + config.$modifier-separator + $unit + ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

/// Generate BEM selector for state
/// @access public
/// @param {String} $state - State name
/// @example
///   @include when('active') {
///     @content;
///   }
///   .#{$B}__#{$E}--#{$M}.is-active {
///     @content;
///   }
@mixin when($state) {
  @at-root {
    &.#{config.$state-prefix + $state} {
      @content;
    }
  }
}

/// Generate BEM selector for state not
/// @access public
/// @param {String} $state - State name
/// @example
///   @include when-not('active') {
///     @content;
///   }
///   .#{$B}__#{$E}--#{$M}:not(.is-active) {
///     @content;
///   }
@mixin when-not($state) {
  @at-root {
    &.#{':not(' + config.$state-prefix + $state + ')'} {
      @content;
    }
  }
}
